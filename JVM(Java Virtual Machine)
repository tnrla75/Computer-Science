## JVM(Java Virtual Machine)

JVM은 2가지 특징을 가진다. 자바 기반 어플리케이션을 어느 OS상에서든 실행될 수 있는것, 운영체제에 구애 받지 않고 프로그램을 실행할 수 있게 도와준다. 가비지 컬렉터를 사용한 프로그램 메모리를 관리하고 최적화한다. 

<br>

### JVM 메모리 구조
![](https://www.tcpschool.com/lectures/img_java_programming.png)
1. 자바 소스 파일(.java)은 자바 컴파일러에 의해 바이트 코드(.class)로 변환됩니다.
    + 자바 바이트 코드는 컴퓨터는 읽지 못하고 JVM이 읽을 수 있다. 
2. 변경된 바이트 코드는 클래스 로더에게 전달한다.
    + 클래스 로더 과정
      1. 로드 : 바이트 코드를 가져와 JVM의 메모리에 로드한다.
      2. 검증 : 과정 중에서 가장 시간이 많이 걸리는 과정, 읽어들인 클래스가 자바 언어 명세(JAVA Language Specification) 및 JVM 명세에 명시된 대로 구성되어 있는지 검증.
      3. 준비 : 클래스가 필요로 하는 메모리 할당한다. (필드, 메소드, 인터페이스 등)
      4. 분석 : 클래스의 상수 풀 내 모든 심볼릭 레퍼런스를 다이렉트 레퍼런스로 변경.
      5. 초기화 : 클래스 변수들을 적절한 값으로 초기화 (static 필드)
      
![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F99B467465B73D15111)
3. 클래스 로더는 동적 로딩(Dynamic loading)을 통해 필요한 클래스들을 로딩 및 링크하여 각 런타임 데이터 영역에 할당함.
    + JVM이 OS 위에서 실행되면서 할당받는 메모리 영역이 런타임 데이터 영역이다.
    + PC Register, JVM Stack, Native Method Stack 은 스레드마다 하나씩 생성된다
    + 힙(Heap), 메소드 영역(Method Area)는 모든 스레드가 공유해서 사용된다
        1. PC

5. 실행 엔진(Excution Engine)은 JVM 메모리에 올라온 바이트 코드들을 가져와서 실행한다.
